server:
  port: 9001
  shutdown: graceful
  tomcat:
    # Defines a limit for how much time Tomcat should wait between accepting a TCP connection from a client and actually receiving the HTTP request
    # It helps prevent denial-of-service attacks where a connection is established, Tomcat reserves a thread to handle the request, and the request never comes.
    # The same timeout is used to limit the time spent reading the HTTP request body when there is one.
    # The default value is 20s (20 seconds), which is probably too much for a standard cloud native application.
    # In the context of highly distributed systems in the cloud, we probably don't want to wait more than a couple of seconds and risk a cascading failure
    # due to a Tomcat instance hanging for too long.
    connection-timeout: 2s # how long Tomcat will wait for a client request after client connected.
    # Configure how long to keep a connection open while waiting for new HTTP requests.
    # In other words, connectionTimeout is how long Tomcat will wait for the first HTTP request to be sent after TCP connection was established,
    # keepAliveTimeout is how long it will wait for another request to be sent over the same connection
    keep-alive-timeout: 15s # how long Tomcat will wait for another request before closing the connection
    threads:
      max: 50
      min-spare: 5

management:
  endpoints:
    web:
      base-path: /management
      exposure:
        include: refresh

spring:
  application:
    name: catalog-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  config:
    # Imports configuration data from a config server when available.
    import: "optional:configserver:"
  cloud:
    config:
      # The URL of the config server.
      uri: http://localhost:8888
      # Timeout on waiting to connect to the config server (ms).
      request-connect-timeout: 5000 # 5s
      # Timeout on waiting to read configuration data from the config server (ms).
      request-read-timeout: 5000 # 5s
      # Makes a failure to connect to the config server fatal.
      fail-fast: false # In production, set to true
      retry:
        # Maximum number of attempts.
        max-attempts: 6
        # Initial retry interval for backoff (ms).
        initial-interval: 1000 # 1s
        # Maximum retry interval for backoff (ms).
        max-interval: 2000 # 2s
        # Multiplier to compute the next interval.
        multiplier: 1.1
  datasource:
    username: user
    password: password
    url: jdbc:postgresql://localhost:5432/bookshop_catalog
    hikari:
      # Maximum time (ms) to spend waiting to get a connection from the pool.
      connection-timeout: 2000
      # Maximum number of connections HikariCP will keep in the pool.
      maximum-pool-size: 5

bookshop:
  greeting: Welcome to the local book catalog!
