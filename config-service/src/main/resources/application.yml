server:
  port: 8888
  shutdown: graceful
  tomcat:
    connection-timeout: 2s
    keep-alive-timeout: 15s
    threads:
      max: 50
      min-spare: 5

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

management:
  endpoints:
    web:
      base-path: /management
      exposure:
        include: health, metrics, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  metrics:
    tags:
      # Adds a Micrometer common tag with the application name. This results in a Prometheus label being applied to all metrics.
      application: ${spring.application.name}

spring:
  application:
    name: config-service
  output:
    ansi:
      console-available: true
  lifecycle:
    timeout-per-shutdown-phase: 15s
  cloud:
    config:
      server:
        git:
          uri: https://github.com/sanjayrawat1/bookshop
          # The server searches for config files in the top level and in `config-repo/` subdirectory.
          # Every repository can also optionally store config files in subdirectories, and patterns to search for those directories can be specified as below:
          # Below are the search-paths value for differently organized folder structure:
          # /{application}/application.yml or /{application}/application-{profile}.yml -> config-repo/{application}
          # /{application}.yml or /{application}-{profile}.yml -> config-repo
          search-paths:
            - config-repo
            - config-repo/{application}
          # By default, the server will return the configuration data from the "main" branch.
          default-label: main
          # Time limit to establish a connection with the remote repository.
          # Prevent the config server from waiting too long to establish a connection with the remote repository.
          timeout: 5
          # Clones the remote repository locally on startup. Even though it makes the startup phase a bit slower, it makes your deployment fail faster
          # if there is any difficulty communicating with the remote repository, rather than waiting for the first request to find out that something is wrong.
          # Also, it makes the first request from a client faster. The local copy of the repository improves the config server's fault tolerance because it
          # ensures it can return configuration data to the client application even if the communication with the remote repository is temporarily failing.
          # However, if the config server hasn't cloned the repository locally yet, there's no fallback in place. That's why it's better to fail fast at startup
          # and investigate the issue right away.
          clone-on-start: true
          # Forces pulling the remote repository and discarding any local changes.
          force-pull: true
