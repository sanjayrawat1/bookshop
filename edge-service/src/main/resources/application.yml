server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

#logging:
#  level:
#    io.github.resilience4j: DEBUG

management:
  endpoints:
    web:
      base-path: /management
      exposure:
        include: refresh

spring:
  application:
    name: edge-service
  output:
    ansi:
      console-available: true
  lifecycle:
    timeout-per-shutdown-phase: 15s
  config:
    # Imports configuration data from a config server when available.
    import: "optional:configserver:"
  cloud:
    config:
      # The URL of the config server.
      uri: http://localhost:8888
      # Timeout on waiting to connect to the config server (ms).
      request-connect-timeout: 5000 # 5s
      # Timeout on waiting to read configuration data from the config server (ms).
      request-read-timeout: 5000 # 5s
      # Makes a failure to connect to the config server fatal.
      fail-fast: false # In production, set to true
      retry:
        # Maximum number of attempts.
        max-attempts: 6
        # Initial retry interval for backoff (ms).
        initial-interval: 1000 # 1s
        # Maximum retry interval for backoff (ms).
        max-interval: 2000 # 2s
        # Multiplier to compute the next interval.
        multiplier: 1.1
    gateway:
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          # type of connection pool (elastic, fixed, or disabled)
          type: elastic
          # idle time after which the communication channel will be closed
          max-idle-time: 15s
          # time after which communication channel will be closed
          max-life-time: 60s
      default-filters:
        # Ensures the session data is saved before forwarding a request downstream
        - SaveSession
        # Enables the propagation of the Access Token when calling a downstream service
        - TokenRelay
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              # Number of tokens dripped in the bucket each second
              replenish-rate: 10
              # Allows request bursts of up to 20 requests, when a spike occurs, up to 20 requests are allowed per second.
              # Since replenish rate is lower than the burst capacity, subsequent burst are not allowed.
              # If two spikes happen sequentially, only the first one will succeed, while the second one will result in some request being
              # dropped with an HTTP 429 - Too Many Requests response.
              burst-capacity: 20
              # How many tokens a request costs
              requested-token: 1
        - name: Retry
          args:
            retries: 3
            method: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms
              factor: 2
              basedOnPreviousValue: false
      routes:
        - id: spa-route
          uri: ${SPA_URL:http://localhost:9004}
          predicates:
            - Path=/,/*.css,/*.js,/favicon.ico
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/**
          filters:
            # name of the filter, you can choose to apply it to specific routes or define it as a default filter, like Retry filter
            - name: CircuitBreaker
              args:
                # name of the circuit breaker
                name: catalogCircuitBreaker
                # forwards request to this URI when the circuit is open
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              # no fallback is defined for this circuit breaker
              args:
                name: orderCircuitBreaker
  data:
    redis:
      host: localhost
      port: 6379
      # time limit for a connection to be established
      connect-timeout: 2s
      # time limit for a response to be received
      timeout: 1s
  session:
    # Instruct Spring Boot to use Redis for session management
    store-type: redis
    # Session timeout, default is 30 minutes
    timeout: 10m
    redis:
      # Unique namespace to prefix all session data coming from Edge Service
      namespace: bookshop:edge
  security:
    oauth2:
      client:
        registration:
          # the name identifying the client registration in spring security (called registrationId). It can be any string.
          keycloak:
            # the OAuth2 client identifier as defined in Keycloak
            client-id: edge-service
            # the shared secret used by the client to authenticate with Keycloak
            client-secret: bookshop-keycloak-secret
            # the list of scopes the client would like to have access to.
            # the openid scope triggers OIDC authentication on top of OAuth2
            scope:
              - openid
              - roles
        provider:
          # the same name used as registrationId
          keycloak:
            # the Keycloak URL providing information about all the relevant OAuth2 and OIDC endpoints for the specific realm
            issuer-uri: http://localhost:8080/realms/Bookshop

resilience4j:
  circuitbreaker:
    configs:
      # default configuration bean for all circuit breakers
      default:
        # the size of the sliding window used to record the outcome of calls when the circuit is closed
        sliding-window-size: 20
        # number of permitted calls when the circuit is half open
        permitted-number-of-calls-in-half-open-state: 5
        # when the failure rate is above the threshold, the circuit becomes open
        failure-rate-threshold: 50
        # waiting time before moving from open to half-open (ms)
        wait-duration-in-open-state: 15000
  timelimiter:
    configs:
      # default configuration bean for all time limiters
      default:
        # configures a timeout (seconds), this timeout config will take precedence over the response timeout we define for netty HTTP client
        # using the property -> spring.cloud.gateway.httpclient.response-timeout
        timeout-duration: 5s

bookshop:
  greeting: Welcome to the local bookshop gateway!
