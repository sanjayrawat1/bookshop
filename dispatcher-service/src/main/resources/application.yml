server:
  port: 9003

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

info:
  system: Bookshop

management:
  endpoints:
    web:
      base-path: /management
      exposure:
        include: bindings, configprops, env, functions, health, heapdump, info, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
  metrics:
    tags:
      # Adds a Micrometer common tag with the application name. This results in a Prometheus label being applied to all metrics.
      application: ${spring.application.name}

spring:
  application:
    name: dispatcher-service
  output:
    ansi:
      console-available: true
  config:
    # Imports configuration data from a config server when available.
    import: "optional:configserver:"
  cloud:
    config:
      # The URL of the config server.
      uri: http://localhost:8888
      # Timeout on waiting to connect to the config server (ms).
      request-connect-timeout: 5000 # 5s
      # Timeout on waiting to read configuration data from the config server (ms).
      request-read-timeout: 5000 # 5s
      # Makes a failure to connect to the config server fatal.
      fail-fast: false # In production, set to true
      retry:
        # Maximum number of attempts.
        max-attempts: 6
        # Initial retry interval for backoff (ms).
        initial-interval: 1000 # 1s
        # Maximum retry interval for backoff (ms).
        max-interval: 2000 # 2s
        # Multiplier to compute the next interval.
        multiplier: 1.1
    function:
      # definition of the function managed by Spring Cloud Function.
      # this property lets you declare which functions you want Spring Cloud Function to manage and integrate, resulting in a specific data flow.
      definition: pack|label
    stream:
      # section for configuring destination bindings
      bindings:
        # the input binding
        # the input binding will be mapped to an `order-accepted` exchange and an `order-accepted.dispatcher-service` queue in RabbitMQ
        # if they don't exist already in RabbitMQ, the binder will create them.
        # the queue naming strategy (<destination>.<group>) includes a parameter called `consumer group`.
        packlabel-in-0:
          # the actual name at the broker that the binder binds to (the exchange in RabbitMQ)
          destination: order-accepted
          # the consumer group interested in the destination (same as the application name)
          group: ${spring.application.name}
        # the output binding
        # the output binding will be mapped to an `order-dispatched` exchange in RabbitMQ
        packlabel-out-0:
          # the actual name at the broker that the binder binds to (the exchange in RabbitMQ)
          destination: order-dispatched
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s

bookshop:
  greeting: Welcome to the local bookshop dispatcher!
